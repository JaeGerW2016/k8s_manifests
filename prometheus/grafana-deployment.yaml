apiVersion: extensions/v1beta1
kind: Deployment
metadata:
  annotations:
    deployment.kubernetes.io/revision: "1"
  creationTimestamp: null
  generation: 1
  labels:
    app: grafana
    chart: grafana-1.10.0
    heritage: Tiller
    release: grafana
  name: grafana
  selfLink: /apis/extensions/v1beta1/namespaces/monitoring/deployments/grafana
spec:
  progressDeadlineSeconds: 600
  replicas: 1
  revisionHistoryLimit: 10
  selector:
    matchLabels:
      app: grafana
      release: grafana
  strategy:
    rollingUpdate:
      maxSurge: 25%
      maxUnavailable: 25%
    type: RollingUpdate
  template:
    metadata:
      creationTimestamp: null
      labels:
        app: grafana
        release: grafana
    spec:
      containers:
      - env:
        - name: GF_SECURITY_ADMIN_USER
          valueFrom:
            secretKeyRef:
              key: admin-user
              name: grafana
        - name: GF_SECURITY_ADMIN_PASSWORD
          valueFrom:
            secretKeyRef:
              key: admin-password
              name: grafana
        image: grafana/grafana:5.1.2
        imagePullPolicy: IfNotPresent
        livenessProbe:
          failureThreshold: 3
          httpGet:
            path: /api/health
            port: 3000
            scheme: HTTP
          periodSeconds: 10
          successThreshold: 1
          timeoutSeconds: 1
        name: grafana
        ports:
        - containerPort: 80
          name: service
          protocol: TCP
        - containerPort: 3000
          name: grafana
          protocol: TCP
        readinessProbe:
          failureThreshold: 10
          httpGet:
            path: /api/health
            port: 3000
            scheme: HTTP
          initialDelaySeconds: 60
          periodSeconds: 10
          successThreshold: 1
          timeoutSeconds: 30
        resources: {}
        terminationMessagePath: /dev/termination-log
        terminationMessagePolicy: File
        volumeMounts:
        - mountPath: /etc/grafana/grafana.ini
          name: config
          subPath: grafana.ini
        - mountPath: /etc/grafana/ldap.toml
          name: ldap
          subPath: ldap.toml
        - mountPath: /var/lib/grafana/dashboards/Kubernetes_Cluster_Health.json
          name: dashboards-json
          subPath: Kubernetes_Cluster_Health.json
        - mountPath: /var/lib/grafana/dashboards/Kubernetes_Nodes.json
          name: dashboards-json
          subPath: Kubernetes_Nodes.json
        - mountPath: /var/lib/grafana/dashboards/Kubernetes_Pods.json
          name: dashboards-json
          subPath: Kubernetes_Pods.json
        - mountPath: /etc/grafana/provisioning/datasources/datasources.yaml
          name: config
          subPath: datasources.yaml
        - mountPath: /etc/grafana/provisioning/dashboards/dashboardproviders.yaml
          name: config
          subPath: dashboardproviders.yaml
        - mountPath: /var/lib/grafana
          name: storage
      dnsPolicy: ClusterFirst
      initContainers:
      - command:
        - sh
        - /etc/grafana/download_dashboards.sh
        image: appropriate/curl:latest
        imagePullPolicy: IfNotPresent
        name: download-dashboards
        resources: {}
        terminationMessagePath: /dev/termination-log
        terminationMessagePolicy: File
        volumeMounts:
        - mountPath: /etc/grafana/download_dashboards.sh
          name: config
          subPath: download_dashboards.sh
        - mountPath: /var/lib/grafana
          name: storage
      restartPolicy: Always
      schedulerName: default-scheduler
      securityContext: {}
      serviceAccount: grafana
      serviceAccountName: grafana
      terminationGracePeriodSeconds: 30
      volumes:
      - configMap:
          defaultMode: 420
          name: grafana
        name: config
      - configMap:
          defaultMode: 420
          name: grafana-dashboards-json
        name: dashboards-json
      - name: ldap
        secret:
          defaultMode: 420
          items:
          - key: ldap-toml
            path: ldap.toml
          secretName: grafana
      - emptyDir: {}
        name: storage
status: {}
